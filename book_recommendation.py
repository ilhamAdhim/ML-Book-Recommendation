# -*- coding: utf-8 -*-
"""Book Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15YOPdggjuTJi8fQmJfDs_z2mmr1HX8U7

# **Profil**

---

SIB ID : M131S6091

Nama : Muhammad Ilham Adhim

SIB Email : M131S6091@dicoding.org

# Business Understanding

**Problem Statement**<br>
> Banyaknya opsi buku dengan beragam kategori membuat pengguna menjadi bingung untuk memilih buku yang ingin dibaca. Maka dari itu, perlu adanya sistem rekomendasi buku untuk memberi saran buku yang dapat dibaca oleh pengguna


<br>**Goal** <br>
> Meningkatkan User Experience ketika mencari buku yang ingin dibaca


<br>**Solution**<br>
> Karena dataset terkait hanya berisi tentang detail buku dan genre , maka solusi yang sangat tepat untuk masalah ini adalah dengan menggunakan pendekatan Content-Based Filtering.
"""

!pip install opendatasets

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
import tensorflow as tf

from scipy.sparse import csr_matrix
from sklearn.metrics.pairwise import cosine_similarity

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

import opendatasets as od

od.download("https://www.kaggle.com/justinnguyen0x0x/best-books-of-the-21st-century-dataset")

df_book_list = pd.read_csv('/content/best-books-of-the-21st-century-dataset/Best_Book_21st.csv', parse_dates=True, squeeze=True)
df_book_list

df_rating_list = pd.read_csv('/content/goodbooks-10k/ratings.csv', parse_dates=True, squeeze=True)
df_rating_list

"""# Data Understanding
Untuk submission ini, saya mengambil data dari Kaggle yang bernama Best Books of The 21st Century Dataset. Berikut adalah daftar kolom di file CSV yang tersedia:
* id: id of the book
* title: book's title
* series: book's series. If the book doesn't belong to any series the value will be null
* author: author of the book
* book_link: book's URL on GoodReads
* genre: genres of the book (ordered by number of genre votes)
* date_published: published date
* publisher: publisher of the book
* num_of_page: number of pages
* lang: language of the book
* review_count: number of reviews
* rating_count: number of ratings
* rate: rating
* award: awards of the book
"""

df_book_list.info()

df_book_list['rate'].describe()

for x in range(len(df_book_list)):
  df_book_list['genre'][x] = str(df_book_list['genre'][x]).split(',')[0]

df_book_list

# Available genres:
genres = df_book_list['genre'].unique().tolist()
print("All genres : {}".format(genres))
print("Genres amount : {}".format(len(genres)))

"""### Visualisasi Top 10 Publisher

Melihat berapa banyak buku yang telah dipublish oleh top 10 publisher
"""

df_top_publishers = df_book_list.groupby('publisher')['title'].count().reset_index().sort_values('title', ascending=False).head(10).set_index('publisher')
df_top_publishers

# Pembuatan plot top 10 publishers
sns.set_context('talk')
plt.figure(figsize=(15,10))
ax = sns.barplot(df_top_publishers['title'], df_top_publishers.index, palette='icefire_r')
ax.set_title("Top 10 publishers with most books")
ax.set_xlabel("Total number of books")
for i in ax.patches:
    ax.text(i.get_width()+.3, i.get_y()+0.5, str(round(i.get_width())), fontsize = 10, color = 'k')

"""### Visualisasi persebaran genre

Melihat persebaran genre dari buku buku yang ada
"""

df_visual_genres = df_book_list.groupby('genre')['title'].count().reset_index().sort_values('title', ascending=False).head(10)
df_visual_genres

# Pembuatan diagram batang persebaran genre buku
plt.figure(figsize=(20,6))
plt.title('Top 10 Book Genres')
sns.barplot(x="genre", y="title", data=df_visual_genres, palette='icefire_r')
plt.show()

"""# **Data Preparation**

Langkah langkah yang dilakukan : 
* Menghilangkan null values
* Menghilangkan data dengan genre 'nan'
* Menghilangkan data duplikat
* One-Hot Encoding Proses ini digunakan untuk cosine similarity. Pertama saya membuat one hot encoding pada genre karena setiap film mempunyai jumlah genre yang berbeda dan genre yang bervariasi. Saya membuat kolom baru untuk setiap nilai genre yang terdapat dalam kolom genres.

Dari diagram tersebut, kita dapat informasi bahwa terdapat hampir 1000 buku yang tidak memiliki genre (nan). Oleh karena itu, perlu dilakukan penghapusan null values

### Penghapusan null values
"""

df_book_list['genre'].dropna(axis=0, inplace=True)
df_book_list['rate'].dropna(axis=0, inplace=True)

# Penghapusan buku dengan kategori nan
df_book_list.drop(df_book_list.loc[df_book_list['genre']== 'nan'].index, inplace=True)
print("Setelah penghapusan null values : {}".format(df_book_list.shape))

"""### Penghapusan data duplikat"""

df_book_list.drop_duplicates(subset=['title'], keep='first', inplace=True)
print(df_book_list.shape)

check_duplicates = df_book_list[df_book_list.duplicated()]
print(check_duplicates)

"""### Pemilihan fitur yang signifikan dalam Content Based Filtering"""

df_book_cleaned = df_book_list[['title', 'rate', 'genre', 'id']]
df_book_cleaned.head()

"""# Content-Based Filtering

#### TF-IDF Vectorizer
"""

# Data preparation untuk Cosine Similarity
tf = TfidfVectorizer(stop_words='english')

# Melakukan perhitungan idf pada data movies
tf.fit(df_book_cleaned['genre']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

"""#### Transform data"""

tfidf_matrix = tf.fit_transform(df_book_cleaned['genre']) 
tfidf_matrix.shape

"""#### Proses Perhitungan Cosine Similarity"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""#### Pembuatan Dataframe baru hasil cosine similarity"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=df_book_cleaned['title'],
                             columns=df_book_cleaned['title'])
print('Size dataframe:', cosine_sim_df.shape)

# Melihat similarity matrix tiap buku
cosine_sim_df.sample(10, axis=1).sample(10, axis=0)

"""# Recommendation Result for Content-Based Filtering

#### Pembuatan fungsi baru untuk merekomendasikan 10 buku yang sejenis
"""

def BookRecommendations(book_title, similarity_data=cosine_sim_df, 
                         items=df_book_cleaned[["id","title","genre"]], k=10):
  
    ''' Mengambil data menggunakan argpartition untuk partisi secara tidak langsung,
    sepanjang sumbu yang diberikan, kemudian dataframe diubah menjadi numpy Range 
    dengan parameter sebagai berikut (start, stop, step) '''
    index = similarity_data.loc[:, book_title].to_numpy().argpartition(
        range(-1, -k, -1)
    )

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop movie_title agar nama movie yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(book_title, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""#### Pengujian data dengan menggunakan buku berjudul 'Wartime Farm'.
Dapat dilihat bahwa buku 'Wartime Farm' bergenre 'History'
"""

# Check data lengkap sebuah title 
find_title = df_book_cleaned[df_book_cleaned['title'] == 'Wartime Farm']
find_title

"""#### Rekomendasi buku yang serupa dengan 'Wartime Farm'"""

book_suggestion = BookRecommendations(book_title = 'Wartime Farm')
book_suggestion